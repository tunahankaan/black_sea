# -*- coding: utf-8 -*-
"""FinancialDataAnalysis3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FuxidrP-7-aONahpCt4TLTCGXFI8IVCh
"""

pip install yahoofinancials

pip install plotly

pip install statsmodels

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from yahoofinancials import YahooFinancials
import plotly.graph_objects as go

vest_df = yf.download('VESTL.IS',
                       start = '2017-01-01',
                       progress = False)

vest_df.index = pd.to_datetime(vest_df.index)

vest_df

##Veri Görselleştirme

#Plotly kütüphanesini kullanarak bir mum çubuğu grafiği oluşturur.
#go.Candlestick objesi, mum çubuğu grafiği oluşturmak için kullanılır.
fig = go.Figure(data=[go.Candlestick(x=vest_df.index,
                                     open = vest_df['Open'],
                                     high = vest_df['High'],
                                     low = vest_df['Low'],
                                     close = vest_df['Close'])])

fig.show()

##Tanımlayıcı istatistikler

vest_df.describe()

##Hareketli Ortalama(Moving Average)

close_app = vest_df.iloc[len(vest_df)//2:,3] # Tüm kapanış değerlerinin yarısı alındı.

close_app

# 5 günlük ortalama
rolling_app5 = close_app.rolling(window=5).mean()

# 14 günlük ortalama
rolling_app14 = close_app.rolling(window=14).mean()

# 21 günlük ortalama
rolling_app21 = close_app.rolling(window=21).mean()

MAs = pd.concat([close_app,rolling_app5,rolling_app14,rolling_app21],axis=1)
MAs.columns = ['Close','Short','Mid','Long']
MAs.head(25)

MAs.tail(50)

##DataFrame içindeki NaN değerleri (dropna), yani eksik verileri kaldırır.
##axis = 0 argümanı, satırları (gözlemleri) işaret eder
MAs.dropna(axis = 0, inplace = True)
MAs.head()

##figsize=(20,10) parametresi, grafiğin genişliğini ve yüksekliğini belirler.
##Her ax.plot çağrısı, bir çizgi çizmek için gereken verileri ve çizginin etiketini içerir.
fig, ax = plt.subplots(figsize=(12,4))
ax.plot(close_app.index, close_app, label='Vestel')
ax.plot(rolling_app5.index, rolling_app5, label='5 days rolling')
ax.plot(rolling_app14.index, rolling_app14, label='14 days rolling')
ax.plot(rolling_app21.index, rolling_app21, label='21 days rolling')
ax.legend(loc='upper left')

MAs['Short']-MAs['Mid']

np.array(MAs['Short']-MAs['Mid'])

# Short ve Mid değerleri arasındaki tüm değerler içindeki en küçük %10. değeri
##Amaç uzaklıklar arasındaki optimum uzaklık
np.abs(np.percentile(np.array(MAs['Short']-MAs['Mid']),10))

def buy_sell_MA(data, opt = 50):
  buy_sell = []
  buy_signal = []
  sell_signal = []
  flag = 42

  up = data[(np.array(data['Short']-data['Mid'])>0) & (np.array(data['Short']-data['Long'])>0)]
  down = data[(np.array(data['Short']-data['Mid'])<0) & (np.array(data['Short']-data['Long'])<0)]

  ups = np.percentile(np.array(up['Short']-up['Mid']),opt)
  downs = np.percentile(np.array(down['Short']-down['Long']),opt)

  for i in range(0,len(data)):
    if (data['Short'][i] > data['Mid'][i]+ups) & (data['Short'][i] > data['Long'][i]+ups):
      buy_signal.append(np.nan)
      if flag != 1:
        sell_signal.append(data['Close'][i])
        buy_sell.append(data['Close'][i])
        flag = 1
      else:
        sell_signal.append(np.nan)
    elif (data['Short'][i] < data['Mid'][i]+downs ) & (data['Short'][i] < data['Long'][i]+downs):
      sell_signal.append(np.nan)
      if flag != 0:
        buy_signal.append(data['Close'][i])
        buy_sell.append(-data['Close'][i])
        flag = 0
      else :
        buy_signal.append(np.nan)
    else :
      buy_signal.append(np.nan)
      sell_signal.append(np.nan)
      buy_sell.append(np.nan)
    operations = np.array(buy_sell)
    operations = operations[~np.isnan(operations)]

    neg=0
    pos=0

    for i in range(len(operations)):
      if operations[i] <0:
        neg=i
        break
    for i in range(1,len(operations)):
      if operations[-i] > 0:
        pos = i-1
        break
    operations = operations[neg:-pos]
    PL = np.sum(operations)
  return (buy_signal,sell_signal,PL)

MAs['BUY']=buy_sell_MA(MAs)[0]
MAs['SELL']=buy_sell_MA(MAs)[1]

plt.figure(figsize=(10,5))
plt.scatter(MAs.index, MAs['BUY'], color = 'green', label = 'BUY', marker = '^', alpha = 1)
plt.scatter(MAs.index, MAs['SELL'], color = 'red', label = 'SELL', marker = 'v', alpha = 1)
plt.plot(MAs['Close'], label = 'Close Price', alpha = 0.5)
plt.title('Close Price Buy and Sell Signal')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend('upper left')
plt.show

##Optimizasyon işlemleri

np.arange(10,91,5)

opt = []
percentile = np.arange(10,91,5)
for i,j in enumerate(percentile):
  opt.append((percentile[i],buy_sell_MA(MAs,j)[2]))
opt = pd.DataFrame(opt)
opt.columns = ['Percentile','Performance']
opt = opt.sort_values(by='Performance',ascending=False)

opt.head()

opt['Percentile']

opt['Percentile'].values[0]

MAs['BUY']= buy_sell_MA(MAs, opt['Percentile'].values[0])[0]
MAs['SELL']= buy_sell_MA(MAs, opt['Percentile'].values[0])[1]

res_MA = buy_sell_MA(MAs, opt['Percentile'].values[0])[2]

res_MA

plt.figure(figsize=(10,5))
plt.scatter(MAs.index, MAs['BUY'], color = 'green', label = 'BUY', marker = '^', alpha = 1)
plt.scatter(MAs.index, MAs['SELL'], color = 'red', label = 'SELL', marker = 'v', alpha = 1)
plt.plot(MAs['Close'], label = 'Close Price', alpha = 0.5)
plt.title('Close Price Buy and Sell Signal')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend('upper left')
plt.show

##Bollinger Band

MAs['Close'].rolling(window = 20).mean()

BBs=pd.DataFrame()
BBs['Close']=MAs['Close']
BBs['SMA']=MAs['Close'].rolling(window = 20).mean()# 20 gözlemlik ortalama değerleri
BBs['STD']=MAs['Close'].rolling(window = 20).std() # 20 gözlemlik standart sapma değerleri
BBs['upper']=BBs['SMA']+BBs['STD']*2 #Ortalamadan iki std sapma yukarı
BBs['lower']=BBs['SMA']-BBs['STD']*2 #Ortalamadan iki std sapma aşağı
## Amaç std sapmalar arası oluşturarak bir güven aralığı belirleme
BBs.dropna(axis=0, inplace = True)
BBs.head()

fig = plt.figure(figsize=(10,5))
ax = fig.add_subplot(1,1,1)
x_axis = BBs.index
ax.fill_between(x_axis, BBs['upper'], BBs['lower'], color = 'grey', alpha = 0.5)
ax.plot(x_axis,BBs['Close'],label = 'Vestel_Close')
ax.plot(x_axis,BBs['SMA'],label = 'Simple_Moving_Average',lw = 3)
ax.legend()

def buy_sell_BB(data):
  buy_sell = []
  buy_signal = []
  sell_signal = []
  flag = 42

  for i in range(0,len(data)):
    if (data['Close'][i] > data['upper'][i]):
      buy_signal.append(np.nan)
      if flag != 1 :
        sell_signal.append(data['Close'][i])
        buy_sell.append(data['Close'][i])
        flag = 1
      else:
        sell_signal.append(np.nan)
    elif (data['Close'][i] < data['lower'][i]):
        sell_signal.append(np.nan)
        if flag != 0 :
          buy_signal.append(data['Close'][i])
          buy_sell.append(-data['Close'][i])
          flag = 0
        else:
          buy_signal.append(np.nan)
    else:
      buy_sell.append(np.nan)
      sell_signal.append(np.nan)
      buy_signal.append(np.nan)

    operations = np.array(buy_sell)
    operations = operations[~np.isnan(operations)]

    neg=0
    pos=0

    for i in range(len(operations)):
      if operations[i] <0:
        neg=i
        break
    for i in range(1,len(operations)):
      if operations[-i] > 0:
        pos = i-1
        break
    operations = operations[neg:-pos]
    PL = np.sum(operations)
  return (buy_signal,sell_signal,PL)

BBs['BUY']=buy_sell_BB(BBs)[0]
BBs['SELL']=buy_sell_BB(BBs)[1]

res_BB = buy_sell_BB(BBs)[2]

fig = plt.figure(figsize=(10,5))
ax = fig.add_subplot(1,1,1)
x_axis = BBs.index

ax.fill_between(x_axis, BBs['upper'], BBs['lower'], color = 'grey', alpha = 0.5)
ax.plot(x_axis,BBs['Close'],label = 'Vestel_Close')
ax.plot(x_axis,BBs['SMA'],label = 'Simple_Moving_Average',lw = 3)
ax.scatter(x_axis, BBs['BUY'],color = 'green',lw=4,label='BUY',marker='^')
ax.scatter(x_axis, BBs['SELL'],color = 'red',lw=4,label='SELL',marker='v')
ax.legend()

decisions = pd.merge(BBs[['BUY','SELL']],MAs[['BUY','SELL']],left_index=True, right_index=True)
decisions.columns = ['BUY_MA','SELL_MA','BUY_BB','SELL_BB']
decisions

decisions.dropna(thresh=2,axis=0)

decisions.dropna(thresh=1,axis=0)

fig = plt.figure(figsize=(10,5))
ax = fig.add_subplot(1,1,1)
x_axis = BBs.index

ax.fill_between(x_axis, BBs['upper'], BBs['lower'], color = 'grey', alpha = 0.5)
ax.plot(x_axis,BBs['Close'],label = 'Vestel_Close')
ax.plot(x_axis,BBs['SMA'],label = 'Simple_Moving_Average',lw = 3)
ax.scatter(x_axis, decisions['BUY_MA'],color = 'green',lw=4,label='BUY_Moving_Average',marker='^')
ax.scatter(x_axis, decisions['SELL_MA'],color = 'red',lw=4,label='SELL_Moving_Average',marker='v')
ax.scatter(x_axis, decisions['BUY_BB'],color = 'yellow',lw=4,label='BUY_Bollinger_Bound',marker='+')
ax.scatter(x_axis, decisions['SELL_BB'],color = 'black',lw=4,label='SELL_Bollinger_Bound',marker='+')

ax.legend()

##MACD

#span : ağırlıklandırma şiddeti
MDs = pd.DataFrame()
MDs['Close']=MAs['Close']
MDs['Short'] = MDs['Close'].ewm(span=12, adjust = False).mean() # a = 2/(span+1)
MDs['Long'] = MDs['Close'].ewm(span=26, adjust = False).mean()
MDs['MACD'] = MDs['Short'] - MDs['Long']
MDs['signal'] = MDs['MACD'].ewm(span = 9, adjust = False).mean() #MACD değerlerinin 9 günlük ağırlıklandırılmış hareketli ortalaması

MDs.head()

# Kırmızı/mavi kesişimi al - sat tavsiyesi
plt.figure(figsize=(12,5))
plt.plot(MDs.index, MDs.MACD, color = 'red',label = 'MACD')
plt.plot(MDs.index, MDs.signal, color = 'blue', label = 'signal')
plt.legend(loc = 'upper left')
plt.show()

# Kırmızı mavinin altında : BUY
# Kırmızı mavinin üstünde : SELL

def buy_sell_MD(data, opt = 50):
  buy_sell = []
  buy_signal = []
  sell_signal = []
  flag = 42

  up = data[(np.array(data['MACD'] - data['signal'])>0)]
  down = data[(np.array(data['MACD'] - data['signal'])<0)]

  ups = np.percentile(np.array(up['MACD'] - up['signal']),opt)
  downs = np.percentile(np.array(down['MACD'] - down['signal']),opt)

  for i in range(0,len(data)):
    if (data['MACD'][i] > data['signal'][i] + ups):
      buy_signal.append(np.nan)
      if flag != 1 :
        sell_signal.append(data['Close'][i])
        buy_sell.append(data['Close'][i])
        flag = 1
      else:
        sell_signal.append(np.nan)
    elif (data['MACD'][i] < data['signal'][i] + downs):
        sell_signal.append(np.nan)
        if flag != 0 :
          buy_signal.append(data['Close'][i])
          buy_sell.append(-data['Close'][i])
          flag = 0
        else:
          buy_signal.append(np.nan)
    else:
      buy_sell.append(np.nan)
      sell_signal.append(np.nan)
      buy_signal.append(np.nan)

    operations = np.array(buy_sell)
    operations = operations[~np.isnan(operations)]
    neg=0
    pos=0

    for i in range(len(operations)):
      if operations[i] <0:
        neg=i
        break
    for i in range(1,len(operations)):
      if operations[-i] > 0:
        pos = i-1
        break
    operations = operations[neg:-pos]
    PL = np.sum(operations)
  return (buy_signal,sell_signal,PL)

MDs['BUY']=buy_sell_MD(MDs)[0]
MDs['SELL']=buy_sell_MD(MDs)[1]

#Optimizasyon işlemi
percentile = np.arange(10,91,5)
percentile

opt = []
percentile = np.arange(10,91,5)
for i,j in enumerate(percentile):
  opt.append((percentile[i],buy_sell_MD(MDs, j)[2]))
opt = pd.DataFrame(opt)
opt.columns = ['Percentile','Performance']
opt = opt.sort_values(by = 'Performance', ascending=False)
opt.head()

opt['Percentile'].values[0] # En iyi performans veren percentile

MDs['BUY'] = buy_sell_MD(MDs, opt['Percentile'].values[0])[0]
MDs['SELL'] = buy_sell_MD(MDs, opt['Percentile'].values[0])[1]

buy_sell_MD(MDs, opt['Percentile'].values[0])[2] # Percentile en iyi olanın performansı

res_MD = buy_sell_MD(MDs, opt['Percentile'].values[0])[2]

# Amaç; karar mekanizmasında kesişen kolonlarda güçlü al/sat tavsiyesinin hesaplamak
decisions = pd.merge(BBs[['BUY','SELL']],MAs[['BUY','SELL']],left_index=True, right_index=True)
decisions = pd.merge(decisions, MDs[['BUY','SELL']],left_index=True, right_index=True)
decisions.columns = ['BUY_MA','SELL_MA','BUY_BB','SELL_BB','BUY_MACD','SELL_MACD']
decisions

#thresh:kesişim kaç kolonda olsun
decisions.dropna(thresh=2,axis = 0).head() # Hem moving average hem MACD indikatörü için al tavsiyesi

decisions.dropna(thresh=1,axis = 0).head()

##RSI

RSs = pd.DataFrame()
RSs['Close'] = MAs['Close']
RSs['Diff'] = RSs['Close'].diff(1)

RSs['Gain']=RSs['Diff'].mask(RSs['Diff']<0,0)
RSs['Loss']=RSs['Diff'].mask(RSs['Diff']>0,0)
# mask fonksiyonu yardımıyla neg ve pos olanlar ayrıldı
#Diff - ise gain 0
#Diff + ise loss 0

RSs.head(10)

RSs['Avg_Gain']=RSs['Gain'].rolling(window=14).mean()
RSs['Avg_Loss']=RSs['Loss'].rolling(window=14).mean()

RSs.head(20)

rs=abs(RSs['Avg_Gain']/RSs['Avg_Loss'])
RSs['RSI']=100-(100/(1+rs)) # RSI fonksiyonu
# RSI fonksiyonu 0-100 arasında bir değer alır

RSs.head(20)

##High ve low değerlerine göre RSI sonuçlarının aşıp aşmadığı durumlara bakarak al/sat belirlenir
def buy_sell_RS(data, opt_low=30, opt_high=70):
  buy_sell = []
  buy_signal = []
  sell_signal = []
  flag = 42

  for i in range(0,len(data)):
    if (data['RSI'][i]>opt_high):
      buy_signal.append(np.nan)
      if flag != 1 :
        sell_signal.append(data['Close'][i])
        buy_sell.append(data['Close'][i])
        flag = 1
      else:
        sell_signal.append(np.nan)
    elif (data['RSI'][i] < opt_low):
        sell_signal.append(np.nan)
        if flag != 0 :
          buy_signal.append(data['Close'][i])
          buy_sell.append(-data['Close'][i])
          flag = 0
        else:
          buy_signal.append(np.nan)
    else:
      buy_sell.append(np.nan)
      sell_signal.append(np.nan)
      buy_signal.append(np.nan)

    operations = np.array(buy_sell)
    operations = operations[~np.isnan(operations)]
    neg=0
    pos=0

    for i in range(len(operations)):
      if operations[i] <0:
        neg=i
        break
    for i in range(1,len(operations)):
      if operations[-i] > 0:
        pos = i-1
        break
    operations = operations[neg:-pos]
    PL = np.sum(operations)
  return (buy_signal,sell_signal,PL)

RSs['BUY']=buy_sell_RS(RSs)[0]
RSs['SELL']=buy_sell_RS(RSs)[1]

opt = []
percentile = np.arange(0,100,1)
for i,j in enumerate(percentile):
  if j<50:
    opt.append((percentile[i],percentile[-(i+1)], buy_sell_RS(RSs, opt_low = percentile[i], opt_high = percentile[-(i+1)])[2])) #Low_value 1den high_value 99dan başlasın
opt = pd.DataFrame(opt)
opt.columns = ['Low_Value','High_Value','Performance']
opt = opt.sort_values(by = 'Performance', ascending=False)
opt.head()

RSs['BUY'] = buy_sell_RS(RSs, opt_low = opt['Low_Value'].values[0], opt_high = opt['High_Value'].values[0])[0]
RSs['SELL'] = buy_sell_RS(RSs, opt_low = opt['Low_Value'].values[0], opt_high = opt['High_Value'].values[0])[1]

buy_sell_RS(RSs, opt_low = opt['Low_Value'].values[0], opt_high = opt['High_Value'].values[0])[2]

res_RS = buy_sell_RS(RSs, opt_low = opt['Low_Value'].values[0], opt_high = opt['High_Value'].values[0])[2]

RSs.head(5)

# Amaç; karar mekanizmasında kesişen kolonlarda güçlü al/sat tavsiyesinin hesaplamak
decisions = pd.merge(BBs[['BUY','SELL']],MAs[['BUY','SELL']],left_index=True, right_index=True)
decisions = pd.merge(decisions, MDs[['BUY','SELL']],left_index=True, right_index=True)
decisions = pd.merge(decisions, RSs[['BUY','SELL']],left_index=True, right_index=True,suffixes=('_MA', '_RSI'))
decisions.columns = ['BUY_MA','SELL_MA','BUY_BB','SELL_BB','BUY_MACD','SELL_MACD','BUY_RSI','SELL_RSI']
decisions.dropna(thresh=2,axis=0)

##VWMA(Volume Weighted Moving Average) : Hisse senedindeki hacim değişiklikleri ile hacim ağırlıklandırması

VWs = pd.DataFrame()
VWs['Close']=vest_df['Close']
VWs['Volume']=vest_df['Volume']
VWs['C*V'] = VWs['Close'] * VWs['Volume']

VWs.head(5)

VWs['VW14']=VWs['C*V'].rolling(window=14).sum() / VWs['Volume'].rolling(window=14).sum()
VWs['VW21']=VWs['C*V'].rolling(window=21).sum() / VWs['Volume'].rolling(window=21).sum()
VWs['VW50']=VWs['C*V'].rolling(window=50).sum() / VWs['Volume'].rolling(window=50).sum()

VWs.head(50)

fig, ax = plt.subplots(figsize=(12,4))
ax.plot(VWs.index, VWs['Close'], label='Vestel')
ax.plot(VWs['VW14'].index, VWs['VW14'], label='14 days rolling')
ax.plot(VWs['VW21'].index, VWs['VW21'], label='21 days rolling')
ax.plot(VWs['VW50'].index, VWs['VW50'], label='50 days rolling')
ax.legend(loc='upper left')

def buy_sell_VW(data, opt = 50):
  buy_sell = []
  buy_signal = []
  sell_signal = []
  flag = 42

  up = data[(np.array(data['VW14'] - data['VW21'])>0) & (np.array(data['VW14'] - data['VW50'])>0)]
  down = data[(np.array(data['VW14'] - data['VW21'])<0) & (np.array(data['VW14'] - data['VW50'])<0)]

  ups = np.percentile(np.array(up['VW14'] - up['VW21']),opt)
  downs = np.percentile(np.array(down['VW14'] - down['VW50']),opt)

  for i in range(0,len(data)):
    if (data['VW14'][i] > data['VW21'][i] + ups) & (data['VW14'][i] > data['VW50'][i] + ups) :
      buy_signal.append(np.nan)
      if flag != 1 :
        sell_signal.append(data['Close'][i])
        buy_sell.append(data['Close'][i])
        flag = 1
      else:
        sell_signal.append(np.nan)
    elif (data['VW14'][i] < data['VW21'][i] + downs) & (data['VW14'][i] < data['VW50'][i] + downs):
        sell_signal.append(np.nan)
        if flag != 0 :
          buy_signal.append(data['Close'][i])
          buy_sell.append(-data['Close'][i])
          flag = 0
        else:
          buy_signal.append(np.nan)
    else:
      buy_sell.append(np.nan)
      sell_signal.append(np.nan)
      buy_signal.append(np.nan)

    operations = np.array(buy_sell)
    operations = operations[~np.isnan(operations)]
    neg=0
    pos=0

    for i in range(len(operations)):
      if operations[i] <0:
        neg=i
        break
    for i in range(1,len(operations)):
      if operations[-i] > 0:
        pos = i-1
        break
    operations = operations[neg:-pos]
    PL = np.sum(operations)
  return (buy_signal,sell_signal,PL)

VWs['BUY']=buy_sell_VW(VWs)[0]
VWs['SELL']=buy_sell_VW(VWs)[1]

buy_sell_VW(VWs)[2]

res_VW = buy_sell_VW(VWs)[2]

decisions = pd.merge(BBs[['BUY','SELL']],MAs[['BUY','SELL']],left_index=True, right_index=True)
decisions = pd.merge(decisions, MDs[['BUY','SELL']],left_index=True, right_index=True)
decisions = pd.merge(decisions, RSs[['BUY','SELL']],left_index=True, right_index=True,suffixes=('_MA', '_RSI'))
decisions = pd.merge(decisions, VWs[['BUY','SELL']],left_index=True, right_index=True)
decisions.columns = ['BUY_MA','SELL_MA','BUY_BB','SELL_BB','BUY_MACD','SELL_MACD','BUY_RSI','SELL_RSI','BUY_VW','SELL_VW']
decisions.dropna(thresh=1,axis=0)

result = {'Moving Average': res_MA,
          'Bollinger Bounds': res_BB,
          'MACD': res_MD,
          'RSI': res_RS,
          'Volume Weighted Moving Average':res_VW}

result

indics = decisions.dropna(thresh=1,axis=0)

indics

indics.reset_index(inplace=True)

indics

indics = pd.melt(indics,id_vars=['Date'],var_name = 'Metrics', value_name='Values').dropna(axis=0).sort_values(['Date','Values'])

indics

